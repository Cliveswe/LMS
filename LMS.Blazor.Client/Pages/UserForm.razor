@page "/user/create"
@page "/user/edit/{Id}"

@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<div class="UserForm">
    <h1>@(string.IsNullOrEmpty(Id) ? "Create" : "Edit") User</h1>

    <EditForm Model="@UserModel" FormName="UserForm" OnSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="row g-2">
            <div class="col-md">
                <div class="form-floating mb-3">
                    <InputText id="firstName" class="form-control" @bind-Value="UserModel.FirstName" placeholder="First Name" />
                    <label for="firstName">First name</label>
                    <ValidationMessage For="@(() => UserModel.FirstName)" />
                </div>
            </div>
            <div class="col-md">
                <div class="form-floating mb-3">
                    <InputText id="lastName" class="form-control" @bind-Value="UserModel.LastName" placeholder="Last Name" />
                    <label for="lastName">Last name</label>
                    <ValidationMessage For="@(() => UserModel.LastName)" />
                </div>
            </div>
        </div>

        <div class="form-floating mb-3">
            <InputText id="email" class="form-control" @bind-Value="UserModel.Email" placeholder="Email" />
            <label for="email">Email address</label>
            <ValidationMessage For="@(() => UserModel.Email)" />
        </div>

        @if (string.IsNullOrEmpty(Id))
        {
            <div class="form-floating mb-3">
                <InputText id="password" type="password" class="form-control" @bind-Value="UserModel.Password" placeholder="Password" />
                <label for="password">Password</label>
                <ValidationMessage For="@(() => UserModel.Password)" />
            </div>
        }

        <div class="form-floating mb-3">
            <InputSelect id="role" class="form-select" @bind-Value="UserModel.Role" placeholder="Role">
                <option disabled="disabled" selected value="">Select role</option>
                <option value="Student">Student</option>
                <option value="Teacher">Teacher</option>
            </InputSelect>
            <label for="role">Role</label>
            <ValidationMessage For="@(() => UserModel.Role)" />
        </div>

        <!-- Placeholder for Courses selection (e.g., multi-select dropdown) -->
        <div class="form-group">
            <label for="courses">Courses (optional)</label>
            <select id="courses" class="form-control" multiple @onchange="HandleCourseSelectionChange">
                @foreach (var course in AvailableCourses)
                {
                    <option value="@course.Id" selected="@UserModel.SelectedCourseIds.Contains(course.Id)">@course.Name</option>
                }
            </select>
        </div>

        @if (!string.IsNullOrEmpty(Id))
        {
            <button type="submit" class="btn btn-success">Save</button>
        }
        else
        {
            <button type="submit" class="btn btn-success">Create</button>
        }
    </EditForm>
</div>
